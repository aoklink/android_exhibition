//多项目配置
Logger mLogger = Logging.getLogger("ConfigGradle")

subprojects {
    project.afterEvaluate {
        if (hasAndroidPlugin(project)) {
            println "配置：${project.name}"
            android {
                compileSdkVersion rootProject.ext.android.compileSdkVersion
                buildToolsVersion rootProject.ext.android.buildToolsVersion

                lintOptions {
                    abortOnError false
                }

                packagingOptions {
                    exclude 'META-INF/DEPENDENCIES'
                    exclude 'META-INF/rxjava.properties'
                }

                defaultConfig {
                    minSdkVersion rootProject.ext.android.minSdkVersion
                    targetSdkVersion rootProject.ext.android.targetSdkVersion
                    versionCode rootProject.ext.android.versionCode
                    versionName rootProject.ext.android.versionName
//                    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                    javaCompileOptions {
                        annotationProcessorOptions {
                            includeCompileClasspath false
                        }
                    }
                    resConfigs("zh")//仅支持中文
                }

                buildTypes {
                    release {
                        minifyEnabled true
                        zipAlignEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        buildConfigField "boolean", "ENABLE_DEBUG", "false"
                    }

                    debug {
                        buildConfigField "boolean", "ENABLE_DEBUG", "true"
                    }
                }

                if (hasAndroidApplicationPlugin(project)) {
                    // 当前引用的是 android application 插件
                    // 读取签名配置
                    Properties keyProperties = readKeyProperties(rootProject)
                    signingConfigs {
                        release {
                            storeFile new File(keyProperties.getProperty("storeFile"))
                            storePassword keyProperties.getProperty("storePassword")
                            keyAlias keyProperties.getProperty("keyAlias")
                            keyPassword keyProperties.getProperty("keyPassword")
                        }
                    }

                    buildTypes {
                        release {
                            shrinkResources true
                            signingConfig signingConfigs.release
                            if (project.file('proguards').exists()) {
                                proguardFiles project.file('proguards').listFiles()
                            }
                            applicationVariants.all { variant ->
                                variant.outputs.each { output ->
                                    // 格式化输出 apk 名称
                                    if (!variant.buildType.debuggable) {
                                        output.outputFileName = "linkfeeling_${project.name}_${output.name.replaceAll("-", "_")}_${variant.versionName}_" + releaseTime() + ".apk"
                                    } else {
                                        output.outputFileName = "linkfeeling_${project.name}_${output.name.replaceAll("-", "_")}_${variant.versionName}" + ".apk"
                                    }
                                }
                            }
                        }

                        debug {
                            shrinkResources false
                            signingConfig signingConfigs.release
                        }

                    }
                } else {
                    // 当前引用的是 android lib 插件
                    buildTypes {
                        release {
                            if (project.file('proguards').exists()) {
                                // lib 需要使用 consumerProguardFiles
                                consumerProguardFiles project.file('proguards').listFiles()
                            }
                        }
                    }
                }
            }
        }
    }
}

Properties readKeyProperties(Project rootProject) {
    Properties keyProperties = new Properties()
    Properties projectkeyProperties = new Properties()
    if (rootProject.file('key/sign.properties').exists()) {
        println "当前存在签名配置文件"
        projectkeyProperties.load(new FileInputStream(rootProject.file("key/sign.properties")))
    }

    if (System.getProperty("android.storeFile") != null) {
        keyProperties.put("storeFile", System.getProperty("android.storeFile"))
    } else {
        keyProperties.put("storeFile", rootProject.file(projectkeyProperties.getProperty("storeFile")).absolutePath)
    }

    if (System.getProperty("android.storePassword") != null) {
        keyProperties.put("storePassword", System.getProperty("android.storePassword"))
    } else {
        keyProperties.put("storePassword", projectkeyProperties.getProperty("storePassword"))
    }

    if (System.getProperty("android.keyAlias") != null) {
        keyProperties.put("keyAlias", System.getProperty("android.keyAlias"))
    } else {
        keyProperties.put("keyAlias", projectkeyProperties.getProperty("keyAlias"))
    }

    if (System.getProperty("android.keyPassword") != null) {
        keyProperties.put("keyPassword", System.getProperty("android.keyPassword"))
    } else {
        keyProperties.put("keyPassword", projectkeyProperties.getProperty("keyPassword"))
    }

    return keyProperties
}


static boolean hasAndroidPlugin(Project project) {
    project.plugins.hasPlugin('com.android.library') || hasAndroidApplicationPlugin(project)
}

static boolean hasAndroidApplicationPlugin(Project project) {
    project.plugins.hasPlugin('com.android.application')
}

static String releaseTime() {
    return new Date().format("yyyyMMddHH")
}
